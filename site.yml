---

- name: include global default variables
  import_playbook: include_defaults.yml

- name: check if the same cluster already exists
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: setup-os }
    - { role: validate-cluster, tags: setup-os }

- name: setup host operating systems in taco host group
  hosts: taco
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: setup-os/conf-repos, tags: setup-os }
    - { role: setup-os, tags: setup-os }
    - { role: container-registry/client, tags: setup-os }

- name: setup docker on admin-node
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: setup-os }
    - { role: kubespray/roles/container-engine, tags: setup-os  }

- name: setup a local container registry for the offline environment
  hosts: container-registry
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: container-registry, when: container_registry_enabled }
    - { role: kubespray/roles/container-engine, tags: container-registry, when: container_registry_enabled }
    - { role: container-registry/server, tags: container-registry, when: container_registry_enabled }

- name: install kubernetes
  include: kubespray/cluster.yml
  tags: k8s

- name: post install for kubernetes
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: k8s-post-install }
    - { role: k8s/post-install, tags: k8s-post-install }
    - { role: k8s/clients, tags: k8s-post-install }
    - { role: ceph/rook, tags: rook,  when: taco_storage_backend == 'rook-ceph' }
    - { role: decapod, tags: decapod, when: decapod_enabled or decapod_with_db_enabled }

- name: setup helm repository
  hosts: helm-repository
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: helm-repository, tags: helm-repo, when: helm_repo_enabled }

# TODO: add tests for checking status of the new k8s cluster
- name: setup openstack-related config on operating system
  hosts: controller-node:compute-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: taco-apps/openstack/setup-os, tags: openstack, when: '"openstack" in taco_apps' }
    - { role: openvswitch, tags: openvswitch, when: ovs_package_installed }

- name: prepare lma installation
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: taco-apps/lma/pre-install, tags: lma, when: '"lma" in taco_apps' }

# Keycloak/install task will be integrated to taco-apps/deploy role
# once we migrate to decapod from armada.
- name: install istio and keycloack
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: always, when: ('"istio" in taco_apps') or ('"keycloak" in taco_apps') }
    - { role: taco-apps/istio/deploy, tags: deploy-istio, when: '"istio" in taco_apps' }
    - { role: taco-apps/keycloak/prepare, tags: prepare-keycloak, when: '"admin-tools" in taco_apps' }

- name: add a self-signed cert to ca-trust for keycloak
  hosts: taco
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: taco-apps/keycloak/post-install, when: kube_oidc_auth }

- name: deploy taco apps
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray/roles/kubespray-defaults, tags: deploy }
    - { role: taco-apps/openstack/pre-install, tags: openstack, when: '"openstack" in taco_apps' }

- name: run opentackclient container and make os_clients.sh file for user
  hosts: admin-node
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: taco-apps/openstack/client, tags: openstack-client, when: '"openstack" in taco_apps' }

- name: store versions to configmap
  import_playbook: store_version.yml
