---
- name: create namespace to deploy argo
  shell: >-
    {{ bin_dir }}/kubectl create namespace argo
  ignore_errors: true
  become: false

- name: install argo-workflow chart
  shell: >-
    {{ bin_dir }}/helm install argo-workflow {{ argo_workflow_chart_source }} -n argo \
    --set controller.image.registry={{ argo_workflow_controller_image_registry }} \
    --set controller.image.repository={{ argo_workflow_controller_image_repo }} \
    --set executor.image.registry={{ argo_workflow_executor_image_registry }} \
    --set executor.image.repository={{ argo_workflow_executor_image_repo }} \
    --set server.image.registry={{ argo_workflow_server_image_registry }} \
    --set server.image.repository={{ argo_workflow_server_image_repo }} \
    --set server.serviceType={{ argo_workflow_server_service_type }} 
  become: false

- name: wait for argo pods become ready
  shell: >-
    {{ bin_dir }}/kubectl wait --namespace=argo --for=condition=Ready pods -l app.kubernetes.io/name={{ item }} --timeout=600s
  become: false
  delay: 10
  retries: 3
  with_items:
    - argo-workflows-server
    - argo-workflows-workflow-controller
  register: argo_pods_result
  until: argo_pods_result is not failed

- name: check argo client binary exists
  stat:
    path: "{{ role_path }}/files/{{ argo_client_binary_name }}.gz"
  register: stat_argo_cli_result
  tags: download

- name: download argo client binary
  shell: >-
    curl -L {{ argo_client_url }} -o {{ role_path }}/files/{{ argo_client_binary_name }}.gz
  when: not stat_argo_cli_result.stat.exists
  tags: download

- name: check argo client installed
  stat:
    path: "{{ bin_dir }}/argo"
  register: stat_argo_bin_result

- name: install argo client
  shell: >-
    gunzip {{ role_path }}/files/{{ argo_client_binary_name }}.gz -c > {{ role_path }}/files/{{ argo_client_binary_name }} && chmod +x {{ role_path }}/files/{{ argo_client_binary_name }} && cp {{ role_path }}/files/{{ argo_client_binary_name }} {{ bin_dir }}/argo
  become: true
  when: not stat_argo_bin_result.stat.exists
