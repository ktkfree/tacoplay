---
- name: create namespace to deploy argo
  shell: >-
    {{ bin_dir }}/kubectl create namespace argo
  ignore_errors: true
  become: false

- name: get redis-ha chart verion for argo-cd chart
  shell: >-
    grep version {{ argocd_chart_source }}/Chart.yaml  | tail -1 | awk '{print $2}'
  register: redis_ha_chart_version
  tags: download

- name: create sub-chart directory in argo-cd chart
  file:
    path: "{{ argocd_chart_source }}/charts"
    state: directory
  become: false
  tags: download

- name: check redis-ha chart
  stat:
    path: "{{ argocd_chart_source }}/charts/redis-ha-{{ redis_ha_chart_version.stdout }}.tgz"
  register: stat_redis_chart_result
  tags: download

- name: download redis-ha chart for argo-cd chart
  shell: >-
    cd {{ argocd_chart_source }}/charts && curl -sLO http://dandydeveloper.github.io/charts/redis-ha-{{ redis_ha_chart_version.stdout }}.tgz
  become: false
  when: not stat_redis_chart_result.stat.exists
  tags: download

- name: templating values file for argocd chart
  template:
    src: "{{ role_path }}/templates/argocd_values.j2"
    dest: "{{ role_path }}/files/argocd.vo"
  become: false

# TODO: should check if same helm release already exists
- name: install argo-cd chart
  shell: >-
    {{ bin_dir }}/helm install decapod-argocd {{ argocd_chart_source }} -n argo \
    -f {{ role_path }}/files/argocd.vo
  become: false

- name: wait for argo-cd pods become ready
  shell: >-
    {{ bin_dir }}/kubectl wait --namespace=argo --for=condition=Ready pods -l app.kubernetes.io/name={{ item }} --timeout=600s
  become: false
  delay: 10
  retries: 3
  with_items:
    - argocd-dex-server
    - argocd-redis
    - argocd-application-controller
    - argocd-repo-server
    - argocd-server
  register: argocd_pods_result
  until: argocd_pods_result is not failed

- name: check argocd client binary exists
  stat:
    path: "{{ role_path }}/files/{{ argocd_client_binary_name }}"
  register: stat_argocd_cli_result
  tags: download

- name: download argocd client binary
  shell: >-
    curl -L {{ argocd_client_url }} -o {{ role_path }}/files/{{ argocd_client_binary_name }}
  when: not stat_argocd_cli_result.stat.exists
  tags: download

- name: check argocd client installed
  stat:
    path: "{{ bin_dir }}/argocd"
  register: stat_argocd_bin_result

- name: install argo-cd client
  shell: >-
    chmod +x {{ role_path }}/files/{{ argocd_client_binary_name }} && cp {{ role_path }}/files/{{ argocd_client_binary_name }} {{ bin_dir }}/argocd
  become: true
  when: not stat_argocd_bin_result.stat.exists

- name: install htpasswd to create bcrypt hash for argocd admin user's password
  package: name={{ htpasswd_pkg_name }} state=latest

- name: create bcrypt argocd admin's password hash
  shell: >-
    htpasswd -nbBC 10 ADMIN {{ argocd_admin_password }} |  cut -d':' -f 2
  register: argocd_admin_password_hash

- name: get password modified time
  shell: >-
    date +%FT%T%Z
  register: argocd_admin_password_mtime

- name: change argocd admin's password
  shell: >-
    kubectl -n argo patch secret argocd-secret -p '{"stringData": { "admin.password": "{{ argocd_admin_password_hash.stdout }}", "admin.passwordMtime": "{{ argocd_admin_password_mtime.stdout }}" }}'
  become: false

- name: delete argocd initial password secret
  shell: >-
    kubectl -n argo delete secret argocd-initial-admin-secret
  become: false

- name: get one of the master node IP address
  shell: >-
     kubectl get no --selector=node-role.kubernetes.io/master -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}' | awk '{print $1}'
  register: k8s_master_node_ip_addr
  become: false

- name: get nodePort of the argocd server service
  shell: >-
    kubectl get svc -n argo decapod-argocd-server -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}'
  register: argocd_server_svc_nodeport
  become: false

- name: get current kuberetes cluster context
  shell: >-
    kubectl config view -o jsonpath='{.current-context}'
  register: k8s_current_context
  become: false

- name: add an explicit target cluster context
  shell: |
    argocd login --insecure {{ k8s_master_node_ip_addr.stdout }}:{{ argocd_server_svc_nodeport.stdout }} --username admin --password {{ argocd_admin_password }}
    argocd cluster add {{ k8s_current_context.stdout }} --name {{ argocd_current_cluster_name }} --upsert
  become: false

